package atomic

// Marker predicate, tells that the given ptr is used as an atomic value
pred Atomic(x *int32)

// Retrieve the atomic's invariant
ghost
requires acc(Atomic(x), _)
decreases _
pure func Inv(x *int32) pred()

// Make the pointer atomic and set the invariant
ghost
requires acc(x)
ensures Atomic(x)
decreases
func Atomize(x *int32)

// Represents the latest observed value of an atomic
ghost
requires acc(Atomic(x), _)
decreases
pure func Obs(x *int32) int32

type CasOp struct {
  from, to int32
}

// Represents a successful CompareAndSwap
ghost
requires acc(Atomic(x), _)
decreases
pure func Change(x *int32) CasOp

// represents a change in the atomic's value
ghost
requires acc(Atomic(x), _)
decreases
pure func Set(x *int32) int32

requires acc(Atomic(addr), _)
ensures Atomic(addr) && (swapped ==> Obs(addr) == vnew && Change(addr) == CasOp{vold, vnew})
decreases
func CompareAndSwapInt32(addr *int32, vold int32, vnew int32) (swapped bool)

// TODO: Probably needs its own struct... Or just Obs() the new value?
requires acc(Atomic(addr), _)
ensures Atomic(addr) && Obs(addr) == vnew && Change(addr) == CasOp{vnew - delta, vnew}
decreases
func AddInt32(addr *int32, delta int32) (vnew int32)

requires acc(Atomic(addr), _)
ensures Atomic(addr) && Obs(addr) == vnew && Set(addr) == vnew
decreases
func StoreInt32(addr *int32, vnew int32)

requires acc(Atomic(addr), _)
ensures Atomic(addr) && Obs(addr) == val
decreases
func LoadInt32(addr *int32) (val int32)

